import random
 
from bke import MLAgent, is_winner, opponent, RandomAgent, train_and_plot
 
 
class MyAgent(MLAgent):
    def evaluate(self, board):
        if is_winner(board, self.symbol):
            reward = 1
        elif is_winner(board, opponent[self.symbol]):
            reward = -1
        else:
            reward = 0
        return reward
    
    
random.seed(1)
 
my_agent = MyAgent(alpha=0.9, epsilon=0.1) 
random_agent = RandomAgent()

 
train_and_plot(
    agent=my_agent,
    validation_agent=random_agent,
    iterations=50,
    trainings=100,
    validations=1000)

#Wanneer de alpha groter wordt gebruikt de computer vaker zetten die hij geleerd heeft en lukt het hem sneller om veel te winnen. Bij alpha 0.9 bereikt hij die piek al heel snel en bij een lagere alpha duurt dit langer
